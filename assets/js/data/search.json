[ { "title": "How To DualBoot Windows and Linux on the Same Hard Drive", "url": "/posts/howtodualboot/", "categories": "aws, security", "tags": "aws, security", "date": "2022-06-22 22:10:00 -0400", "snippet": "In this video, we go over the installation of EndeavourOS and Windows 10.Dual Booting Widows 10 and Linux is quite easy but I don’t recommend that you dual boot both Windows and Linux on the same hard drive. It is a better idea to use a dedicated hard drive for each OS, but in the case where you can’t and you want to use Linux while still being able to boot into Windows only on a single hard drive, you can, using the method below: Install Windows 10 and allocate only half of the space for the creation of the windows partitions. In our example, we used a 120GB hard drive and split it down the middle, 60GB of Windows and 60GB for Linux. Of course, feel free to chose your own partition size. Once Windows 10 is installed, boot with the EndeavourOS and go through the installation until you get to the partitioning. Create three partitions, one of these partitions is optional: EFI Boot partition /boot/efi (if using EFI or create a /boot if you’re on MBR) NOTE: In any case, when we create a /boot/efi, the system will also configure /boot in order to store the kernel and the initramfs. the EFI system partition (ESP) will contain the EFI boot loader. Root (/) Linux Swap (recommended but optional) Once the Linux OS is installed, we can safely reboot and we should be presented with a GRUB menu where we can see both the Linux and Windows installations. Using the GRUB menu, we can then pick and chose what OS to boot into." }, { "title": "Secure AWS resources using Security Groups", "url": "/posts/secureawsresources/", "categories": "aws, security", "tags": "aws, security", "date": "2022-06-21 22:10:00 -0400", "snippet": "To quote AWS documentation:A security group acts as a virtual firewall, controlling the traffic that is allowed to reach and leave the resources that it is associated with. For example, after you associate a security group with an EC2 instance, it controls the inbound and outbound traffic for the instance.Reference to the security groups documentationPart of deploying AWS resources is understanding how to secure various applications and services. I believe at the base layer, security groups play a big part in providing a layer of security to the applications. It is very important that we don’t forget to restrict access to the resources that are deployed in AWS, and ensuring only authorized communication can occur between these resources." }, { "title": "Customize the Linux Terminal", "url": "/posts/customizelinuxterminal/", "categories": "linux, terminal", "tags": "linux, terminal", "date": "2022-01-14 21:10:00 -0500", "snippet": "In order to customize the terminal, we are going to download a few packages as well as cusomtize the .zshrc file in order to make the terminal a alot better on the eyes :) .Let’s begin!Intalling and switching to ZSHDownload and install ZSH with the following command:Install ZSHsudo pacman -S zshOnce installed, in order to switch to zsh, we need to run the following command:chsh# when prompted, type the command below:/bin/zshOnce this step has been completed, in order to get the ZSH prompt, we need to log off and log back in.Configure PowerLevel10kSource: https://github.com/romkatv/powerlevel10k#installationTo install this addon, simply navigate to the git hub repo in the link above and git clone the repo on to your local machinegit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10kecho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' &gt;&gt;~/.zshrcOnce the step above has been configured, we can return to the terminal and type the following command to start the configuration part of PowerLevel10kp10k configureThen go through the prompts to customise your terminal:Install NeoftechTo install neofetch, simply run the following command:sudo pacman -S neofetchInstall MesloLGS FontsSimply follow the following link to to install the MesloLGS fontshttps://github.com/romkatv/powerlevel10k#fontsInstall shell-color-scripts PackageTo install shell-color-scripts package, do the following:# This will install color-scripts from the AURyay -S shell-color-scriptsGogh Color SchemesTo get various different color schemes in the terminal, you can use Gogh found here: https://mayccoll.github.io/Gogh/Install LSD packagesudo pacman -S lsdInstalling BAT packagesudo pacman -S batSyntax HighlightingIn order to configure ZSH syntax highlighting, we need to do the following:# STEP 1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git# STEP 2echo \"source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" &gt;&gt; ${ZDOTDIR:-$HOME}/.zshrcAuto-SuggestionsThis is another very useful plugin that allows the terminal to suggest various commands based on your history, in other words, if there are commands that you use often, rather than going through history to find the command, the auto-suggestions plugin can by default suggest the command you’re trying to run vs you having to type it manually yourself. To enable auto-suggestions, we need to do the following:# STEP 1git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions# STEP 2 - add this to the .zshrc filesource ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zshConfigure the .ZSHRCIn order for all of these settings to be applied, we need to configure the .zshrc config file with things like alias, launch options, etc. Here’s my current .zshrc config file:# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.# Initialization code that may require console input (password prompts, [y/n]# confirmations, etc.) must go above this block; everything else may go below.if [[ -r \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\" ]]; then source \"${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\"fisource ~/powerlevel10k/powerlevel10k.zsh-theme# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh## History ##SAVEHIST=1000 # Save most-recent 1000 linesHISTFILE=~/.zsh_history## Color Script ##colorscript -e space-invaders## Neofetch ##neofetch## Misc ##typeset -g POWERLEVEL9K_INSTANT_PROMPT=off## Some Aliases ##alias ls='ls --color=auto'alias grep='grep --color=auto'alias ll='ls -la'alias cat='bat'## colorize Man pages ##export LESS_TERMCAP_mb=$'\\e[1;32m'export LESS_TERMCAP_md=$'\\e[1;32m'export LESS_TERMCAP_me=$'\\e[0m'export LESS_TERMCAP_se=$'\\e[0m'export LESS_TERMCAP_so=$'\\e[01;33m'export LESS_TERMCAP_ue=$'\\e[0m'export LESS_TERMCAP_us=$'\\e[1;4;31m'## LSD ##command -v lsd &gt; /dev/null &amp;&amp; alias ls='lsd --group-dirs first'## Syntax highlighting ##source /home/theprof/Data/Programs/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh## Auto-Suggestions ##source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" }, { "title": "Gaming on Linux", "url": "/posts/gamingonlinux/", "categories": "linux, gaming", "tags": "linux", "date": "2022-01-07 21:10:00 -0500", "snippet": "In this post, I am going to show you how to get gaming working on Linux. To make Gaming happen on Linux, there are a couple of packages that we will need to install: Drivers: For your GPU (Very Important) Wine: Compatibility layer for running Windows applications on POSIX compliant operating systems like Linux. More information here Steam: Game client for downloading games Lutris: Game client that allows you to centralize your games in one spot and giving a ton of customization options to get your games to work ProtonGE: A fork of wine that allows for Windows games to run on Linux. More information can be found here.Let’s Begin!Pre-RequisitesThe first and probably most important part of getting gaming to work, is identifying and figuring out what GPU is presently configured on the machine and if you have the proper driver available. To this, we can run a command in the terminal to view this information:lspci | grep \"Radeon\"or if you have an NVIDIA card, it would be something like this:lspci | grep \"NVIDIA\"NOTE: For AMD Cards, there’s no need to install any proprietary drivers, if you have a card that is from at least the last 5 years, the drivers for those AMD GPUs will be already in kernel, so there’s nothing to do. These drivers are open source. However, if you’re using an NVIDIA GPU, you will need to download the proprietary drivers yourself. The good news, is that there are a few Linux distros that will include the NVIDIA driver installation when you first intsall the Linux distro, so chances are, if you picked to install Linux with the proprietary drivers, you just need to validate if you’ve installed the latest drivers.Validate if the NVIDIA drivers are installedTo do this, we can simply issue something like this in the terminal to see what drivers are currently installed:# NVIDIA Driversnvidia-smiOnce confirmed that the drivers are installed, we can proceed to the next steps.Installing WINETo install WINE, it is actually quite simple, we just need to run the following command:# For Wine run commmandsudo pacman -S wine# For Wine-staging run commandsudo pacman -S wine-stagingOne Installed, we can move on to Steam.Installing SteamTo install Steam, it is the same as installing Wine, we simply run the following command:sudo pacman -S steamNOTE: When you’re installing Steam, you’ll get a prompt to chose the proper provider for the vulkan driver, you will need to chose the proper provider depending on your GPU::There are 5 providers available for vulkan-driver:::Repository extra 1) amdvlk 2) nvidia-utils 3) vulkan-intel 4) vulkan-radeon 5) vulkan-swrastIn our case, we are using Radeon so this is what we will go with, “vulkan-radeon“, however, for nvidia, it would be “nvidia-utils“After selecting the proper provider above, you will be asked to select the proper library to use next, with a similar output:::There are 4 providers available for lib32-vulkan-driver:::Repository multilib 1) lib32-amdvlk 2) lib32-nvidia-utils 3) lib32-vulkan-intel 4) lib32-vulkan-radeonMultilib is basically going to give us the capability to run 32bit apps on amd64. So in our case, we’re going with lib32-vulkan-radeon and if you have an NVIDIA card, it would be lib32-nvidia-utils.Installing LutrisInstalling Lutris is just as simple as installing Wine, we just issue the command:sudo pacman -S lutrisNow, let’s look at how we can install ProtonGE.Installing ProtonGE custom ProtonNavigate to the following github page and download the appropriate version of ProtonGE for your games. I recommend to look at protondb.com for what other users are saying when using ProtonGE for a specific game. To install ProtonGE, follow this procedure.NOTE: Steam needs to be installed and opened at least once before doing this procedure in order to avoid issues.Configure Steam with ProtonThis step is very easy, once Steam is installed, we’re going to need to launch it and do the following:Steam –&gt; Settings –&gt; Steam Play and click on “Enable Steam Play for supported titles” and “Enable Steam Play for all other titles“. Once these settings are applied, Steam will need to be restarted." }, { "title": "Home Lab", "url": "/posts/homelab/", "categories": "homelab", "tags": "servers, storage, network", "date": "2022-01-06 21:10:00 -0500", "snippet": "If you work in IT, you knw that there’s a constant evolution of technology and so we find ourselves often learning new skills. I am a visual person, and so the best way for me to learn, is by doing, not only reading. For this reason, I decided to setup a small lab where I can experiment with different software and see how everything works.ComputeI needed to purchase some hardware for the home lab, but I didnt want to have the bulky servers like the R710 or R610, I wanted something small, quiet, and cheap. I intend to use these servers as virtualization host running Proxmox, as well as running VMs with containers inside. I figured, I’d go with 2 hosts and each hosts loaded with 32GB of Memory. As I am running very small workloads, like containers mainly and few other services like pfsense, vault, and consul, having 64GB of memory is more than enough. This much memory still leaves a good amount of free memory for testing various other services… but typically, I only have 3-4 VMs running at all times. 2 x Lenovo Ideacenter 5 (Proxmox Hosts) CPU: Intel Core i5 10400 6C/12T @2.9Ghz Base and boosts to 4.3Ghz Memory: 32GB DDR4 Non ECC NOTE: When I move to a new place, I will build a more robust lab, and will use ECC memory, but for now, this will do. Storage: 1 x 256GB NVMe drive and 1 x 1TB SSD NIC: Intel i350 1Gb quad port NIC StorageFor storage, I primarily use a Synology DS412+ NAS, it acts as my backup for VMs, File Server,and Docker host to host some containers.I also backup the Synology NAS offsite, using Amazon GlacierNetworkingFor netwoking equipment, I primarily use the following: Switch: Netgear GS274T 24 x 1Gb Ports Access Point: TP-Link EAP265 Router/Modem: Bell HH3000ServicesIn terms of what services I run in my lab, inlcude: Docker Homer (Dashboard) Portainer pfSense Prometheus Grafana Uptime Kuma Vault TrueNAS" }, { "title": "My Linux Setup Featuring EndeavourOS + Gnome", "url": "/posts/myliuxsetup/", "categories": "linux", "tags": "linux", "date": "2022-01-05 21:10:00 -0500", "snippet": "In this video, I review how I have my Gnome desktop environment customized to my preference.ExtensionsHere are the extensions that I currently use with my Gnome environment: Blur my Shell Color Picker Colored Application Menu Icon Gnome 4x UI Improvements Hide Activities Button Sound Input &amp; Output Device Chooser Tiling Assistant User Themes Vitals Weather in The Clock Workspace IndicatorTerminal ThemeI am currently using PowerLevel10k for the gnome-terminal theme.ThemeFlat Remix is my prefernece for the theme that I am currently using in Gnome. I also use the Oreo cursors look for the system cursor theme." }, { "title": "Getting Bluetooth to work in Linux", "url": "/posts/gettingbluetoothtoworkinlinux/", "categories": "linux", "tags": "linux", "date": "2021-12-26 21:10:00 -0500", "snippet": "From what I see, there are a lot of folks asking for help to get Bluetooth working on their laptops and desktops. I figured I’d write a small post to explain how Bluetooth configuration in Linux works and hopefully this will help out a lot of folks.Most laptops these days come with Bluetooth hardware, there should not be a need to buy Bluetooth hardware separately unless you’re using a desktop computer (although some motherboards do have Bluetooth built-in) or you have really old hardware that does not have Bluetooth.NOTE: You can purchase Bluetooth modules separately, that would connect to your computer either through a USB or a PCIE port. For this post, I am going to assume, that the Bluetooth hardware exists on your laptop/desktop.Validate Bluetooth Hardware existsTo see if Bluetooth hardware is present on the laptop and/or desktop, we can run the following command:sudo dmesg | grep -i \"bluetooth\"If your system does in fact have the Bluetooth hardware, you should see something similar to this:[ 2.116644] Bluetooth: Core ver 2.22[ 2.116660] NET: Registered PF_BLUETOOTH protocol family[ 2.116662] Bluetooth: HCI device and connection manager initialized[ 2.116664] Bluetooth: HCI socket layer initialized[ 2.116666] Bluetooth: L2CAP socket layer initialized[ 2.116669] Bluetooth: SCO socket layer initialized[ 2.248109] Bluetooth: BNEP (Ethernet Emulation) ver 1.3[ 2.248112] Bluetooth: BNEP filters: protocol multicast[ 2.248115] Bluetooth: BNEP socket layer initialized[ 9.398294] hid-generic 0005:1532:0092.000D: input,hidraw12: BLUETOOTH HID v0.01 Mouse [Naga Pro] on b4:0e:de:f9:dd:09[ 10.898205] Bluetooth: RFCOMM TTY layer initialized[ 10.898213] Bluetooth: RFCOMM socket layer initialized[ 10.898215] Bluetooth: RFCOMM ver 1.11As you can see in the picture above, I do have my Razer Naga Pro mouse connect to my PC over Bluetooth. This should also give you an indication that Bluetooth hardware is present.Make sure Bluetooth Protocol Stack is installedNext, in order to use Bluetooth in Linux, we need to install the Bluetooth Protocol stack known as “bluez“. To validate if bluez is already installed, we can issue the following command:pacman -Q | grep \"bluez\"This should return something like this:bluez 5.62-1bluez-libs 5.62-1If you do not see any results, there’s a good chance you don’t have the Bluetooth protocol stack installed, so to fix this, simply use the package manager to install it like this:sudo pacman -S bluezEnable Bluetooth Servicesystemctl status bluetoothThis should provide us with an output similar to this:bluetooth.service - Bluetooth service Loaded: loaded (/usr/lib/systemd/system/bluetooth.service; enabled; vendor preset: d&gt; Active: active (running) since Sun 2021-12-26 12:12:37 EST; 10min ago Docs: man:bluetoothd(8) Main PID: 809 (bluetoothd) Status: \"Running\" Tasks: 1 (limit: 38394) Memory: 2.8M CPU: 689ms CGroup: /system.slice/bluetooth.service └─809 /usr/lib/bluetooth/bluetoothdDec 26 12:13:27 \"machine_name\" bluetoothd[809]: Endpoint registered: sender=:1.70 path=/MediaEndpo&gt;If the service is not started, which by default I noticed it was not, we just have to start the servicesystemctl start bluetoothWe can also make this service start on boot up so that we dont have to enable it every time. To this, we simply issue the following command:systemctl enable bluetoothConnect your Bluetooth devicesOnce the Bluetooth service has been started, we can enable the Bluetooth functionality in the settings menu, in the case of Gnome, here’s an example:At this point, it is now just a question of pairing your devices together.ConclusionAs you see from this post, it is quite easy to setup Bluetooth and does not require a lot of effort. There are of course instances where there might be specific issues to to iron out, it might take a bit more effort. But the intention here is to show you that there are a few steps to get this to work, and once you have an understanding of the process, if you do run into issues, you’ll have a better understanding of what specific area to look at to troubleshoot. Either way, feel free to leave any questions you might have if you’re still experiencing issues." }, { "title": "AWS Certified Solutions Architect Associate", "url": "/posts/awssolutionarchitectassociate/", "categories": "certification", "tags": "aws, certifications", "date": "2021-07-24 22:10:00 -0400", "snippet": "I’ve spent some time over the past few months preparing to take the AWS Solutions Architect Associate level exam.Happy to report I managed to pass the exam! How did I do it? I used the following to help me through the exam.Preparation I used Adrian Cantrill’s training, he does a great job of going over every topic. His course can be found here. I also used the AWS free tier which was quite crucial in making sure I properly understood the concepts Tuturials Dojo practice test, although I didn’t do that many practice questions. However, Tuturials Dojo does an awesome job with creating questions that are harder than what’s on the actual examExperienceI found the exam to be quite interesting actually… There’s definitely a lot of content to go through, this is not the type of exam that you can pass if you don’t prepare or if you don’t have any experience. However, if you prepare for this exam with adequate time, you can can easily pass it.The training from Adrian is actually quite good, he goes into depth but also covers the basics and makes sure that he properly explains the foundational information prior to jumping into the content. So for example, if you’ve worked in Networking, chances are, you have a good understanding of NAT, if you don’t, Adrian does a good job of explaining it in a way that you can understand the foundational knowledge and then be able to grasp the more complicated concepts.ConclusionI personally highly recommend the training on AWS or any other cloud for that matter. The cloud is becoming quite popular with many enterprises today, so the sooner you get to work with this technology, the better it will be for you down the road when looking for roles in the cloud space." }, { "title": "AWS Certified Cloud Practitioner", "url": "/posts/awscloudpractitioner/", "categories": "certification", "tags": "aws, certifications", "date": "2021-05-05 22:10:00 -0400", "snippet": "This was the first exam in a series of certifications that I wanted to complete. the Cloud Practitioner exam is a good place to start if you want to learn about AWS. It covers the fundamental knowledge you’ll need for all the other certifications that Amazon offers. This exam is not a requirement for the other exams like the Solutions Architect Associate or Professional, however I highly recommend to start there as it will also get you used to taking the exams online with less stress, especially if you’re new to AWS and certification taking. The cost of the exam was 100 USD and I was able to do it online.My Method of study: Watch all the videos first Go over the whitepapers Hands on Labs until I feel comfortable Practice tests – I used A Cloud Guru practice test as well as I bought a practice test from AWS Depending on the practice test scores, if I have an area I am weak in, I would then go back and review the material until I understand itI am now preparing for the AWS Solution Architect Associate exam so having passed this, definitely helps with learning the more advanced concepts that are covered in the solution architect associate exam.I used the following Study material: A Cloud Guru – AWS Certified Cloud Practitioner 2020 White Papers AWS Knowledge CenterThis is more than enough to pass the the practitioner exam, however for solution architect associate, these are a great resource." } ]
